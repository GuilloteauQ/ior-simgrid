diff --git a/src/smpi/bindings/smpi_pmpi_file.cpp b/src/smpi/bindings/smpi_pmpi_file.cpp
index e8dfd51da4..292e417d3b 100644
--- a/src/smpi/bindings/smpi_pmpi_file.cpp
+++ b/src/smpi/bindings/smpi_pmpi_file.cpp
@@ -43,13 +43,21 @@ int PMPI_File_open(MPI_Comm comm, const char *filename, int amode, MPI_Info info
   if (amode < 0)
     return MPI_ERR_AMODE;
   const SmpiBenchGuard suspend_bench;
+
+  aid_t rank_traced = simgrid::s4u::this_actor::get_pid();
+  auto plop = "io-open " + std::string(filename);
+  TRACE_smpi_comm_in(rank_traced, __func__, new simgrid::instr::CpuTIData(plop, 0));
   *fh =  new simgrid::smpi::File(comm, filename, amode, info);
+  TRACE_smpi_comm_out(rank_traced);
+
   if ((*fh)->size() != 0 && (amode & MPI_MODE_EXCL)){
     delete fh;
     return MPI_ERR_AMODE;
   }
   if(amode & MPI_MODE_APPEND)
     (*fh)->seek(0,MPI_SEEK_END);
+
+
   return MPI_SUCCESS;
 }
 
@@ -57,7 +65,11 @@ int PMPI_File_close(MPI_File *fh){
   CHECK_NULL(2, MPI_ERR_ARG, fh)
   CHECK_COLLECTIVE((*fh)->comm(), __func__)
   const SmpiBenchGuard suspend_bench;
+  aid_t rank_traced = simgrid::s4u::this_actor::get_pid();
+  auto plop = "io-close " + std::string((*fh)->name());
+  TRACE_smpi_comm_in(rank_traced, __func__, new simgrid::instr::CpuTIData(plop, 0));
   int ret = simgrid::smpi::File::close(fh);
+  TRACE_smpi_comm_out(rank_traced);
   *fh = MPI_FILE_NULL;
   return ret;
 }
@@ -99,7 +111,8 @@ int PMPI_File_read(MPI_File fh, void *buf, int count,MPI_Datatype datatype, MPI_
   PASS_ZEROCOUNT(count)
   const SmpiBenchGuard suspend_bench;
   aid_t rank_traced = simgrid::s4u::this_actor::get_pid();
-  TRACE_smpi_comm_in(rank_traced, __func__, new simgrid::instr::CpuTIData("IO - read", count * datatype->size()));
+  auto plop = "io-read " + std::string(fh->name());
+  TRACE_smpi_comm_in(rank_traced, __func__, new simgrid::instr::CpuTIData(plop, count * datatype->size()));
   int ret = simgrid::smpi::File::read(fh, buf, count, datatype, status);
   TRACE_smpi_comm_out(rank_traced);
   return ret;
@@ -124,7 +137,8 @@ int PMPI_File_write(MPI_File fh, const void *buf, int count,MPI_Datatype datatyp
   PASS_ZEROCOUNT(count)
   const SmpiBenchGuard suspend_bench;
   aid_t rank_traced = simgrid::s4u::this_actor::get_pid();
-  TRACE_smpi_comm_in(rank_traced, __func__, new simgrid::instr::CpuTIData("IO - write", count * datatype->size()));
+  auto plop = "io-write " + std::string(fh->name());
+  TRACE_smpi_comm_in(rank_traced, __func__, new simgrid::instr::CpuTIData(plop, count * datatype->size()));
   int ret = simgrid::smpi::File::write(fh, const_cast<void*>(buf), count, datatype, status);
   TRACE_smpi_comm_out(rank_traced);
   return ret;
diff --git a/src/smpi/include/smpi_file.hpp b/src/smpi/include/smpi_file.hpp
index 60ab2fde22..c74e3e0855 100644
--- a/src/smpi/include/smpi_file.hpp
+++ b/src/smpi/include/smpi_file.hpp
@@ -44,7 +44,8 @@ class File : public F2C{
   int flags() const;
   MPI_Datatype etype() const;
   MPI_Comm comm() const;
-  std::string name() const override {return file_ ? std::string("MPI_File: ")+ std::string(file_->get_path()): std::string("MPI_File");}
+  // std::string name() const override {return file_ ? std::string("MPI_File: ")+ std::string(file_->get_path()): std::string("MPI_File");}
+  std::string name() const override {return file_ ? std::string(file_->get_path()): std::string("MPI_File");}
 
   int sync();
   int seek(MPI_Offset offset, int whence);
@@ -142,7 +143,7 @@ int File::op_all(void* buf, int count, const Datatype* datatype, MPI_Status* sta
       //we want to send only useful data, so let's pretend we pack it
       send_sizes[i]=send_sizes[i]/datatype->get_extent()*datatype->size();
       // store min and max offset to actually read
-  
+
       min_offset = std::min(min_offset, min_offsets[i]);
       total_sent += send_sizes[i];
       XBT_CDEBUG(smpi_io, "will have to send %d bytes to %d", send_sizes[i], i);
